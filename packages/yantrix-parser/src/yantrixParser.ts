import {
	JisonParser,
	JisonParserApi,
	StateType,
	SymbolsType,
	TerminalsType,
	ProductionsType,
} from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
export class YantrixParser extends JisonParser implements JisonParserApi {
	$?: any;
	symbols_: SymbolsType = {
		error: 2,
		start: 3,
		notesDocument: 4,
		EOF: 5,
		noteLine: 6,
		NewLine: 7,
		Note: 8,
		note: 9,
		direction: 10,
		of: 11,
		StateID: 12,
		document: 13,
		end: 14,
		left: 15,
		right: 16,
		line: 17,
		statements: 18,
		InitialState: 19,
		ContextDefenitions: 20,
		EventEmitStatement: 21,
		SubcribeStatement: 22,
		ContextStatement: 23,
		'<=': 24,
		'(': 25,
		KeyList: 26,
		')': 27,
		'#{': 28,
		'}': 29,
		'=': 30,
		'emit/': 31,
		EventName: 32,
		'subscribe/': 33,
		'=>': 34,
		ActionStatement: 35,
		ActionName: 36,
		expressions: 37,
		KeyItem: 38,
		',': 39,
		TargetProperty: 40,
		Expression: 41,
		FunctionOperator: 42,
		Property: 43,
		StringDeclaration: 44,
		Array: 45,
		Constant: 46,
		FunctionName: 47,
		Arguments: 48,
		Ident: 49,
		PropertyArgument: 50,
		decimalLiteral: 51,
		integerLiteral: 52,
		'$(': 53,
		ConstantReference: 54,
		$accept: 0,
		$end: 1,
	};
	terminals_: TerminalsType = {
		2: 'error',
		5: 'EOF',
		7: 'NewLine',
		9: 'note',
		11: 'of',
		12: 'StateID',
		14: 'end',
		15: 'left',
		16: 'right',
		19: 'InitialState',
		24: '<=',
		25: '(',
		27: ')',
		28: '#{',
		29: '}',
		30: '=',
		31: 'emit/',
		32: 'EventName',
		33: 'subscribe/',
		34: '=>',
		36: 'ActionName',
		39: ',',
		40: 'TargetProperty',
		43: 'Property',
		44: 'StringDeclaration',
		45: 'Array',
		47: 'FunctionName',
		50: 'PropertyArgument',
		51: 'decimalLiteral',
		52: 'integerLiteral',
		53: '$(',
		54: 'ConstantReference',
	};
	productions_: ProductionsType = [
		0,
		[3, 2],
		[4, 0],
		[4, 2],
		[6, 1],
		[6, 1],
		[8, 7],
		[10, 1],
		[10, 1],
		[13, 0],
		[13, 2],
		[17, 1],
		[17, 1],
		[18, 1],
		[18, 1],
		[18, 1],
		[18, 1],
		[20, 1],
		[20, 5],
		[23, 3],
		[23, 5],
		[21, 2],
		[21, 6],
		[22, 4],
		[35, 1],
		[35, 4],
		[37, 2],
		[26, 1],
		[26, 3],
		[26, 1],
		[38, 3],
		[38, 1],
		[41, 1],
		[41, 1],
		[41, 1],
		[41, 1],
		[41, 1],
		[42, 3],
		[42, 4],
		[48, 1],
		[48, 1],
		[48, 3],
		[49, 1],
		[49, 1],
		[49, 1],
		[49, 1],
		[49, 1],
		[46, 3],
	];
	table: Array<StateType>;
	defaultActions: { [key: number]: any } = {
		3: [2, 1],
		9: [2, 7],
		10: [2, 8],
	};

	constructor(yy = {}, lexer = new YantrixLexer(yy)) {
		super(yy, lexer);

		// shorten static method to just `o` for terse STATE_TABLE
		const $V0 = [5, 7, 9],
			$V1 = [7, 14, 19, 28, 31, 33],
			$V2 = [1, 32],
			$V3 = [27, 29, 30],
			$V4 = [7, 14, 19, 24, 28, 31, 33],
			$V5 = [1, 52],
			$V6 = [1, 53],
			$V7 = [27, 29, 30, 39],
			$V8 = [1, 69],
			$V9 = [1, 66],
			$Va = [1, 67],
			$Vb = [1, 68],
			$Vc = [1, 74],
			$Vd = [27, 39];
		const o = JisonParser.expandParseTable;
		this.table = [
			o($V0, [2, 2], { 3: 1, 4: 2 }),
			{ 1: [3] },
			{ 5: [1, 3], 6: 4, 7: [1, 5], 8: 6, 9: [1, 7] },
			{ 1: [2, 1] },
			o($V0, [2, 3]),
			o($V0, [2, 4]),
			o($V0, [2, 5]),
			{ 10: 8, 15: [1, 9], 16: [1, 10] },
			{ 11: [1, 11] },
			{ 11: [2, 7] },
			{ 11: [2, 8] },
			{ 12: [1, 12] },
			o($V1, [2, 9], { 13: 13 }),
			{
				7: [1, 17],
				14: [1, 14],
				17: 15,
				18: 16,
				19: [1, 18],
				20: 19,
				21: 20,
				22: 21,
				23: 22,
				28: [1, 25],
				31: [1, 23],
				33: [1, 24],
			},
			{ 9: [1, 26] },
			o($V1, [2, 10]),
			o($V1, [2, 11]),
			o($V1, [2, 12]),
			o($V1, [2, 13]),
			o($V1, [2, 14]),
			o($V1, [2, 15]),
			o($V1, [2, 16]),
			o($V1, [2, 17], { 24: [1, 27] }),
			{ 32: [1, 28] },
			{ 32: [1, 29] },
			{ 26: 30, 38: 31, 40: $V2 },
			o($V0, [2, 6]),
			{ 25: [1, 33] },
			o($V1, [2, 21], { 24: [1, 34] }),
			{ 34: [1, 35] },
			{ 29: [1, 36], 30: [1, 37] },
			o($V3, [2, 29], { 39: [1, 38] }),
			o([27, 29, 39], [2, 31], { 30: [1, 39] }),
			{ 26: 40, 38: 31, 40: $V2 },
			{ 25: [1, 41] },
			{ 35: 42, 36: [1, 43] },
			o($V4, [2, 19]),
			{ 26: 44, 38: 31, 40: $V2 },
			{ 26: 45, 38: 31, 40: $V2 },
			{
				41: 46,
				42: 47,
				43: [1, 48],
				44: [1, 49],
				45: [1, 50],
				46: 51,
				47: $V5,
				53: $V6,
			},
			{ 27: [1, 54] },
			{ 26: 55, 38: 31, 40: $V2 },
			o($V1, [2, 23]),
			o($V1, [2, 24], { 25: [1, 56] }),
			{ 29: [1, 57] },
			o($V3, [2, 28]),
			o($V7, [2, 30]),
			o($V7, [2, 32]),
			o($V7, [2, 33]),
			o($V7, [2, 34]),
			o($V7, [2, 35]),
			o($V7, [2, 36]),
			{ 25: [1, 58] },
			{ 54: [1, 59] },
			o($V1, [2, 18]),
			{ 27: [1, 60] },
			{ 26: 61, 38: 31, 40: $V2 },
			o($V4, [2, 20]),
			{
				27: [1, 62],
				42: 64,
				44: $V8,
				46: 70,
				47: $V5,
				48: 63,
				49: 65,
				50: $V9,
				51: $Va,
				52: $Vb,
				53: $V6,
			},
			{ 27: [1, 71] },
			o($V1, [2, 22]),
			{ 27: [1, 72] },
			o($V7, [2, 37]),
			{ 27: [1, 73], 39: $Vc },
			o($Vd, [2, 39]),
			o($Vd, [2, 40]),
			o($Vd, [2, 42]),
			o($Vd, [2, 43]),
			o($Vd, [2, 44]),
			o($Vd, [2, 45]),
			o($Vd, [2, 46]),
			o($V7, [2, 47]),
			o($V1, [2, 25]),
			o($V7, [2, 38]),
			{
				42: 64,
				44: $V8,
				46: 70,
				47: $V5,
				48: 75,
				49: 65,
				50: $V9,
				51: $Va,
				52: $Vb,
				53: $V6,
			},
			{ 27: [2, 41], 39: $Vc },
		];
	}

	performAction(
		yytext: string,
		yyleng: number,
		yylineno: number,
		yy: any,
		yystate: number /* action[1] */,
		$$: any /* vstack */,
		_$: any /* lstack */,
	): any {
		/* this == yyval */
		var $0 = $$.length - 1;
		switch (yystate) {
			case 1:
				return $$[$0 - 1];
				break;
			case 2:
				this.$ = [];
				break;
			case 3:
				if ($$[$0] !== '\n') this.$.push($$[$0]);

				break;
			case 6:
				console.log($$[$0 - 2]);
				this.$ = { state: $$[$0 - 3], description: $$[$0 - 2] };
				break;
			case 9:
				this.$ = { contextDescription: [], emit: [], subscribe: [] };
				break;
			case 10:
				if ($$[$0] !== '\n') {
					if ($$[$0].hasOwnProperty('context'))
						$$[$0 - 1]['contextDescription'].push($$[$0]);
					if ($$[$0].hasOwnProperty('eventName'))
						$$[$0 - 1]['emit'].push($$[$0]);
					if ($$[$0].hasOwnProperty('event'))
						$$[$0 - 1]['subscribe'].push($$[$0]);
				}

				break;
			case 13:
				this.$ = { initialState: true };
				break;
			case 18:
				this.$ = { ...$$[$0 - 4], payload: $$[$0 - 1] };
				break;
			case 19:
				this.$ = { context: $$[$0 - 1] };
				break;
			case 20:
				this.$ = {
					context: $$[$0 - 3],
					initialValue: $$[$0 - 1],
				};
				break;
			case 21:
				this.$ = { eventName: $$[$0] };
				break;
			case 22:
				this.$ = {
					eventName: $$[$0 - 4],
					payload: $$[$0 - 1],
				};
				break;
			case 23:
				this.$ = {
					event: $$[$0 - 2],
					action: $$[$0],
				};

				break;
			case 24:
				this.$ = { actionName: $$[$0] };
				break;
			case 25:
				this.$ = {
					actionWithPayload: {
						actionName: $$[$0 - 3],
						payload: $$[$0 - 1],
					},
				};
				break;
			case 26:
				return $$[$0 - 1];
				break;
			case 39:
				console.log(this.$);
				break;
		}
	}
}

/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class YantrixLexer extends JisonLexer implements JisonLexerApi {
	options: any = { 'case-insensitive': true, moduleName: 'Yantrix' };
	constructor(yy = {}) {
		super(yy);
	}

	rules: RegExp[] = [
		/^(?:$)/i,
		/^(?:[\r\n]+)/i,
		/^(?:[\s]+)/i,
		/^(?:\+INITIAL\b)/i,
		/^(?:note\b)/i,
		/^(?:left\b)/i,
		/^(?:right\b)/i,
		/^(?:end\b)/i,
		/^(?:of\s)/i,
		/^(?:[^\n#{()=><]+)/i,
		/^(?:=>[\s])/i,
		/^(?:[^\}\()>\s\n<=]+)/i,
		/^(?:subscribe\/)/i,
		/^(?:[^/=>\s]+)/i,
		/^(?:<=[\s])/i,
		/^(?:=>[\s])/i,
		/^(?:[^(][A-Za-z]+(?=[=,]))/i,
		/^(?:#\{)/i,
		/^(?:\})/i,
		/^(?:emit\/)/i,
		/^(?:[^()=<\n]+)/i,
		/^(?:[0-9]+\.[0-9]+)/i,
		/^(?:[0-9]+)/i,
		/^(?:\$\()/i,
		/^(?:[A-Za-z_]+)/i,
		/^(?:\))/i,
		/^(?:'[^\n#{()=><"]+')/i,
		/^(?:\[\])/i,
		/^(?:\()/i,
		/^(?:,)/i,
		/^(?:\))/i,
		/^(?:[A-Za-z]{1,}[A-Za-z0-9\.]+(?=[(]))/i,
		/^(?:[A-Za-z_]+)/i,
		/^(?:[^($\n,)]+)/i,
		/^(?:=)/i,
		/^(?:\s+)/i,
		/^(?:'[^\n#{()=><"]+')/i,
		/^(?:[A-Za-z]{1,}[A-Za-z0-9\.]+(?=[(]))/i,
		/^(?:$)/i,
	];
	conditions: any = {
		KeyList: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 21,
				22, 23, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38,
			],
			inclusive: true,
		},
		Constant: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 21,
				22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38,
			],
			inclusive: true,
		},
		Prop: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 21,
				22, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38,
			],
			inclusive: true,
		},
		Func: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 21,
				22, 23, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38,
			],
			inclusive: true,
		},
		Note: { rules: [9], inclusive: false },
		Payload: { rules: [], inclusive: false },
		SubcribeStatement: { rules: [13], inclusive: false },
		EmitStatement: { rules: [20], inclusive: false },
		ActionStatement: { rules: [11], inclusive: false },
		PayloadValue: { rules: [], inclusive: false },
		PayloadStatement: { rules: [], inclusive: false },
		ContextInitialValue: { rules: [], inclusive: false },
		ContextStatement: { rules: [], inclusive: false },
		INITIAL: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 21,
				22, 23, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38,
			],
			inclusive: true,
		},
	};
	performAction(
		yy: any,
		yy_: any,
		$avoiding_name_collisions: any,
		YY_START: any,
	): any {
		var YYSTATE = YY_START;
		switch ($avoiding_name_collisions) {
			case 0:
				return 5;
				break;
			case 1:
				return 7;
				break;
			case 2 /* skip all whitespace */:
				break;
			case 3:
				return 19;
				break;
			case 4:
				return 9;
				break;
			case 5:
				return 15;
				break;
			case 6:
				return 16;
				break;
			case 7:
				return 14;
				break;
			case 8:
				this.begin('Note');
				return 11;
				break;
			case 9:
				this.popState();
				return 12;
				break;
			case 10:
				this.begin('ActionStatement');
				return 34;
				break;
			case 11:
				this.popState();
				return 36;
				break;
			case 12:
				this.begin('SubcribeStatement');
				return 33;
				break;
			case 13:
				this.popState();
				return 32;
				break;
			case 14:
				return 24;
				break;
			case 15:
				return 34;
				break;
			case 16:
				this.begin('KeyList');
				return 40;
				break;
			case 17:
				return 28;
				break;
			case 18:
				return 29;
				break;
			case 19:
				this.begin('EmitStatement');
				return 31;
				break;
			case 20:
				this.popState();
				return 32;
				break;
			case 21:
				return 51;
				break;
			case 22:
				return 52;
				break;
			case 23:
				this.begin('Constant');
				return 53;
				break;
			case 24:
				return 54;
				break;
			case 25:
				this.popState();
				return 27;
				break;
			case 26:
				return 44;
				break;
			case 27:
				return 45;
				break;
			case 28:
				return 25;
				break;
			case 29:
				return 39;
				break;
			case 30:
				return 27;
				break;
			case 31:
				this.begin('Func');
				return 47;
				break;
			case 32:
				this.popState();
				return 50;
				break;
			case 33:
				this.popState();
				return 43;
				break;
			case 34:
				this.begin('Prop');
				return 30;
				break;
			case 35 /* skip whitespace */:
				break;
			case 36:
				return 44;
				break;
			case 37:
				this.begin('Func');
				return 47;
				break;
			case 38:
				return 5;
				break;
		}
	}
}
