import {
	JisonParser,
	JisonParserApi,
	StateType,
	SymbolsType,
	TerminalsType,
	ProductionsType,
} from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
export class YantrixParser extends JisonParser implements JisonParserApi {
	$?: any;
	symbols_: SymbolsType = {
		error: 2,
		start: 3,
		document: 4,
		EOF: 5,
		line: 6,
		statements: 7,
		NewLine: 8,
		InitialState: 9,
		ContextDefinitions: 10,
		EventEmitStatement: 11,
		SubscribeStatement: 12,
		ContextStatement: 13,
		'<=': 14,
		'(': 15,
		KeyList: 16,
		')': 17,
		'#{': 18,
		'}': 19,
		'=': 20,
		'emit/': 21,
		EventName: 22,
		'subscribe/': 23,
		'=>': 24,
		ActionStatement: 25,
		ActionName: 26,
		KeyItem: 27,
		',': 28,
		TargetProperty: 29,
		Expression: 30,
		FunctionOperator: 31,
		Property: 32,
		StringDeclaration: 33,
		Array: 34,
		Constant: 35,
		integerLiteral: 36,
		FunctionName: 37,
		Arguments: 38,
		Ident: 39,
		PropertyArgument: 40,
		decimalLiteral: 41,
		'$(': 42,
		ConstantReference: 43,
		$accept: 0,
		$end: 1,
	};
	terminals_: TerminalsType = {
		2: 'error',
		5: 'EOF',
		8: 'NewLine',
		9: 'InitialState',
		14: '<=',
		15: '(',
		17: ')',
		18: '#{',
		19: '}',
		20: '=',
		21: 'emit/',
		22: 'EventName',
		23: 'subscribe/',
		24: '=>',
		26: 'ActionName',
		28: ',',
		29: 'TargetProperty',
		32: 'Property',
		33: 'StringDeclaration',
		34: 'Array',
		36: 'integerLiteral',
		37: 'FunctionName',
		40: 'PropertyArgument',
		41: 'decimalLiteral',
		42: '$(',
		43: 'ConstantReference',
	};
	productions_: ProductionsType = [
		0,
		[3, 2],
		[4, 0],
		[4, 2],
		[6, 1],
		[6, 1],
		[7, 1],
		[7, 1],
		[7, 1],
		[7, 1],
		[10, 1],
		[10, 5],
		[13, 3],
		[13, 5],
		[11, 2],
		[11, 6],
		[12, 4],
		[25, 1],
		[25, 4],
		[16, 1],
		[16, 3],
		[16, 1],
		[27, 3],
		[27, 1],
		[30, 1],
		[30, 1],
		[30, 1],
		[30, 1],
		[30, 1],
		[30, 1],
		[31, 3],
		[31, 4],
		[38, 0],
		[38, 1],
		[38, 1],
		[38, 3],
		[39, 1],
		[39, 1],
		[39, 1],
		[39, 1],
		[39, 1],
		[35, 3],
	];
	table: Array<StateType>;
	defaultActions: { [key: number]: any } = { 3: [2, 1] };

	constructor(yy = {}, lexer = new YantrixLexer(yy)) {
		super(yy, lexer);

		// shorten static method to just `o` for terse STATE_TABLE
		const $V0 = [5, 8, 9, 18, 21, 23],
			$V1 = [1, 20],
			$V2 = [17, 19, 20],
			$V3 = [5, 8, 9, 14, 18, 21, 23],
			$V4 = [1, 41],
			$V5 = [1, 42],
			$V6 = [17, 19, 20, 28],
			$V7 = [2, 32],
			$V8 = [1, 58],
			$V9 = [1, 57],
			$Va = [1, 55],
			$Vb = [1, 56],
			$Vc = [1, 63],
			$Vd = [17, 28];
		const o = JisonParser.expandParseTable;
		this.table = [
			o($V0, [2, 2], { 3: 1, 4: 2 }),
			{ 1: [3] },
			{
				5: [1, 3],
				6: 4,
				7: 5,
				8: [1, 6],
				9: [1, 7],
				10: 8,
				11: 9,
				12: 10,
				13: 11,
				18: [1, 14],
				21: [1, 12],
				23: [1, 13],
			},
			{ 1: [2, 1] },
			o($V0, [2, 3]),
			o($V0, [2, 4]),
			o($V0, [2, 5]),
			o($V0, [2, 6]),
			o($V0, [2, 7]),
			o($V0, [2, 8]),
			o($V0, [2, 9]),
			o($V0, [2, 10], { 14: [1, 15] }),
			{ 22: [1, 16] },
			{ 22: [1, 17] },
			{ 16: 18, 27: 19, 29: $V1 },
			{ 15: [1, 21] },
			o($V0, [2, 14], { 14: [1, 22] }),
			{ 24: [1, 23] },
			{ 19: [1, 24], 20: [1, 25] },
			o($V2, [2, 21], { 28: [1, 26] }),
			o([17, 19, 28], [2, 23], { 20: [1, 27] }),
			{ 16: 28, 27: 19, 29: $V1 },
			{ 15: [1, 29] },
			{ 25: 30, 26: [1, 31] },
			o($V3, [2, 12]),
			{ 16: 32, 27: 19, 29: $V1 },
			{ 16: 33, 27: 19, 29: $V1 },
			{
				30: 34,
				31: 35,
				32: [1, 36],
				33: [1, 37],
				34: [1, 38],
				35: 39,
				36: [1, 40],
				37: $V4,
				42: $V5,
			},
			{ 17: [1, 43] },
			{ 16: 44, 27: 19, 29: $V1 },
			o($V0, [2, 16]),
			o($V0, [2, 17], { 15: [1, 45] }),
			{ 19: [1, 46] },
			o($V2, [2, 20]),
			o($V6, [2, 22]),
			o($V6, [2, 24]),
			o($V6, [2, 25]),
			o($V6, [2, 26]),
			o($V6, [2, 27]),
			o($V6, [2, 28]),
			o($V6, [2, 29]),
			{ 15: [1, 47] },
			{ 43: [1, 48] },
			o($V0, [2, 11]),
			{ 17: [1, 49] },
			{ 16: 50, 27: 19, 29: $V1 },
			o($V3, [2, 13]),
			{
				17: [1, 51],
				28: $V7,
				31: 54,
				33: $V8,
				35: 59,
				36: $V9,
				37: $V4,
				38: 52,
				39: 53,
				40: $Va,
				41: $Vb,
				42: $V5,
			},
			{ 17: [1, 60] },
			o($V0, [2, 15]),
			{ 17: [1, 61] },
			o($V6, [2, 30]),
			{ 17: [1, 62], 28: $Vc },
			o($Vd, [2, 33]),
			o($Vd, [2, 34]),
			o($Vd, [2, 36]),
			o($Vd, [2, 37]),
			o($Vd, [2, 38]),
			o($Vd, [2, 39]),
			o($Vd, [2, 40]),
			o($V6, [2, 41]),
			o($V0, [2, 18]),
			o($V6, [2, 31]),
			o($Vd, $V7, {
				39: 53,
				31: 54,
				35: 59,
				38: 64,
				33: $V8,
				36: $V9,
				37: $V4,
				40: $Va,
				41: $Vb,
				42: $V5,
			}),
			{ 17: [2, 35], 28: $Vc },
		];
	}

	performAction(
		yytext: string,
		yyleng: number,
		yylineno: number,
		yy: any,
		yystate: number /* action[1] */,
		$$: any /* vstack */,
		_$: any /* lstack */,
	): any {
		/* this == yyval */
		var $0 = $$.length - 1;
		switch (yystate) {
			case 1:
				return $$[$0 - 1];
				break;
			case 2:
				this.$ = { contextDescription: [], emit: [], subscribe: [] };
				break;
			case 3:
				if ($$[$0] !== '\n') {
					if ($$[$0].hasOwnProperty('context'))
						$$[$0 - 1]['contextDescription'].push($$[$0]);
					if ($$[$0].hasOwnProperty('eventName'))
						$$[$0 - 1]['emit'].push($$[$0]);
					if ($$[$0].hasOwnProperty('event'))
						$$[$0 - 1]['subscribe'].push($$[$0]);
				}

				break;
			case 6:
				this.$ = { initialState: true };
				break;
			case 10:
				this.$ = { ...$$[$0] };
				break;
			case 11:
				this.$ = { ...$$[$0 - 4], ...$$[$0 - 1] };
				break;
			case 12:
				this.$ = { context: $$[$0 - 1] };
				break;
			case 13:
				console.log($$[$0 - 1]);
				this.$ = {
					context: $$[$0 - 3],
					initialValue: $$[$0 - 1],
				};
				break;
			case 14:
				this.$ = { eventName: $$[$0] };
				break;
			case 15:
				this.$ = {
					eventName: $$[$0 - 4],
					payload: $$[$0 - 1],
				};
				break;
			case 16:
				this.$ = {
					event: $$[$0 - 2],
					action: $$[$0],
				};

				break;
			case 17:
				this.$ = { actionName: $$[$0] };
				break;
			case 18:
				this.$ = {
					action: {
						actionName: $$[$0 - 3],
						payload: $$[$0 - 1],
					},
				};
				break;
			case 22:
				this.$ = {
					KeyItemDeclaration: {
						TargetProperty: $$[$0 - 2],
						Expression: $$[$0],
					},
				};
				break;
			case 23:
				this.$ = {
					KeyItemDeclaration: {
						TargetProperty: $$[$0].toLowerCase(),
					},
				};
				break;
			case 25:
				this.$ = { Property: $$[$0] };
				break;
			case 26:
				this.$ = { StringDeclaration: $$[$0].toString() };
				break;
			case 27:
				this.$ = { ArrayDeclaration: [] };
				break;
			case 29:
				this.$ = { IntegerValue: Number($$[$0]) };
				break;
			case 30:
				this.$ = {
					FunctionDeclaration: {
						FunctionName: $$[$0 - 2],
						Arguments: [],
					},
				};
				break;
			case 31:
				this.$ = {
					FunctionDeclaration: {
						FunctionName: $$[$0 - 3].toLowerCase(),
						Arguments: [...$$[$0 - 1]],
					},
				};
				break;
			case 32:
				this.$ = [];
				break;
			case 33:
			case 34:
				this.$ = [$$[$0]];
				break;
			case 35:
				this.$ = [...$$[$0 - 2], ...$$[$0]];
				break;
			case 36:
				this.$ = { FunctionProperty: $$[$0] };
				break;
			case 37:
				this.$ = { decimalLiteral: $$[$0] };
				break;
			case 38:
				this.$ = { IntegerValue: Number($$[$0]) };
				break;
			case 39:
				this.$ = { StringDeclaration: $$[$0] };
				break;
			case 41:
				this.$ = { ConstantReference: $$[$0 - 1] };
				break;
		}
	}
}

/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class YantrixLexer extends JisonLexer implements JisonLexerApi {
	options: any = { 'case-insensitive': true, moduleName: 'Yantrix' };
	constructor(yy = {}) {
		super(yy);
	}

	rules: RegExp[] = [
		/^(?:$)/i,
		/^(?:[\r\n]+)/i,
		/^(?:[\s]+)/i,
		/^(?:,)/i,
		/^(?:\+INITIAL\b)/i,
		/^(?:note\b)/i,
		/^(?:\))/i,
		/^(?:\()/i,
		/^(?:left\b)/i,
		/^(?:right\b)/i,
		/^(?:end\b)/i,
		/^(?:'[^\n#{()=><"]+')/i,
		/^(?:of\s)/i,
		/^(?:[^\n#{()=><]+)/i,
		/^(?:subscribe\/)/i,
		/^(?:[^/=>\s]+)/i,
		/^(?:=>[\s])/i,
		/^(?:<=[\s])/i,
		/^(?:\()/i,
		/^(?:=)/i,
		/^(?:emit\/)/i,
		/^(?:[^()=<\n]+)/i,
		/^(?:#\{)/i,
		/^(?:[A-Za-z]{1,}[A-Za-z0-9\.]+(?=[(]))/i,
		/^(?:\))/i,
		/^(?:[^(',)][A-Za-z_]+)/i,
		/^(?:[^()'=,][A-Za-z]+)/i,
		/^(?:[^(')=,][A-Za-z]+)/i,
		/^(?:=)/i,
		/^(?:[A-Za-z]{1,}[A-Za-z0-9\.]+(?=[(]))/i,
		/^(?:\})/i,
		/^(?:[^\}\()>\s\n<=]+)/i,
		/^(?:[0-9]+\.[0-9]+)/i,
		/^(?:[0-9]+)/i,
		/^(?:\$\()/i,
		/^(?:[A-Za-z_]+)/i,
		/^(?:\))/i,
		/^(?:\[\])/i,
	];
	conditions: any = {
		leftArrow: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19,
				20, 22, 23, 27, 30, 32, 33, 34, 37,
			],
			inclusive: true,
		},
		rightSideOperation: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20,
				22, 23, 26, 27, 30, 32, 33, 34, 37,
			],
			inclusive: true,
		},
		KeyList: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20,
				22, 23, 27, 28, 29, 30, 32, 33, 34, 37,
			],
			inclusive: true,
		},
		Constant: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20,
				22, 23, 27, 30, 32, 33, 34, 35, 36, 37,
			],
			inclusive: true,
		},
		Prop: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20,
				22, 23, 27, 30, 32, 33, 34, 37,
			],
			inclusive: true,
		},
		Func: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20,
				22, 23, 24, 25, 27, 30, 32, 33, 34, 37,
			],
			inclusive: true,
		},
		Note: { rules: [13], inclusive: false },
		Payload: { rules: [], inclusive: false },
		SubcribeStatement: { rules: [15], inclusive: false },
		EmitStatement: { rules: [21], inclusive: false },
		ActionStatement: { rules: [31], inclusive: false },
		PayloadValue: { rules: [], inclusive: false },
		PayloadStatement: { rules: [], inclusive: false },
		ContextInitialValue: { rules: [], inclusive: false },
		ContextStatement: { rules: [], inclusive: false },
		INITIAL: {
			rules: [
				0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20,
				22, 23, 27, 30, 32, 33, 34, 37,
			],
			inclusive: true,
		},
	};
	performAction(
		yy: any,
		yy_: any,
		$avoiding_name_collisions: any,
		YY_START: any,
	): any {
		var YYSTATE = YY_START;
		switch ($avoiding_name_collisions) {
			case 0:
				return 5;
				break;
			case 1:
				return 8;
				break;
			case 2 /* skip all whitespace */:
				break;
			case 3:
				return 28;
				break;
			case 4:
				return 9;
				break;
			case 5:
				return 'note';
				break;
			case 6:
				return 17;
				break;
			case 7:
				return 15;
				break;
			case 8:
				return 'left';
				break;
			case 9:
				return 'right';
				break;
			case 10:
				return 'end';
				break;
			case 11:
				yy_.yytext = yy_.yytext.slice(1, -1);
				return 33;
				break;
			case 12:
				this.begin('Note');
				return 'of';
				break;
			case 13:
				this.popState();
				return 'StateID';
				break;
			case 14:
				this.begin('SubcribeStatement');
				return 23;
				break;
			case 15:
				this.popState();
				return 22;
				break;
			case 16:
				this.begin('ActionStatement');
				return 24;
				break;
			case 17:
				this.begin('leftArrow');
				return 14;
				break;
			case 18:
				this.popState();
				return 15;
				break;
			case 19:
				this.begin('rightSideOperation');
				return 20;
				break;
			case 20:
				this.begin('EmitStatement');
				return 21;
				break;
			case 21:
				this.popState();
				return 22;
				break;
			case 22:
				this.begin('KeyList');
				return 18;
				break;
			case 23:
				this.popState();
				this.begin('Func');
				return 37;
				break;
			case 24:
				this.popState();
				return 17;
				break;
			case 25:
				return 40;
				break;
			case 26:
				this.popState();
				return 32;
				break;
			case 27:
				yy_.yytext = yy_.yytext.toLowerCase();
				return 29;
				break;
			case 28:
				this.begin('rightSideOperation');
				return 20;
				break;
			case 29:
				yy_.yytext = yy_.yytext.toLowerCase();
				this.begin('Func');
				return 37;
				break;
			case 30:
				this.popState();
				return 19;
				break;
			case 31:
				this.popState();
				this.begin('KeyList');
				return 26;
				break;
			case 32:
				return 41;
				break;
			case 33:
				return 36;
				break;
			case 34:
				this.begin('Constant');
				return 42;
				break;
			case 35:
				return 43;
				break;
			case 36:
				this.popState();
				return 17;
				break;
			case 37:
				return 34;
				break;
		}
	}
}
